package shape;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import java.awt.*;
import java.io.Serializable;
import java.util.Objects;
import java.util.UUID;

/**
 * The Shape class is an abstract base class representing geometric shapes in the drawing application.
 * It provides common properties and methods that are shared by all shapes.
 */
public abstract class Shape implements Serializable {

    // Unique identifier for the shape, generated by Server
    private String uuid;

    // Inner identifier for the shape
    private String innerId;

    // Starting point of the shape
    protected Point startPoint;

    // Ending point of the shape
    protected Point endPoint;

    // Border color of the shape
    protected Color borderColorModel = Color.BLACK;

    // Fill color of the shape
    protected Color fillColorModel = Color.BLUE;

    // Width of the shape's border
    protected float borderWidth = 1;

    protected int rotation = 0;

    /**
     * Default constructor for creating a Shape object.
     */
    public Shape() {
    }

    /**
     * Parameterized constructor for creating a Shape object with specified attributes.
     *
     * @param startPoint   The starting point of the shape.
     * @param endPoint     The ending point of the shape.
     * @param borderColor  The color of the shape's border.
     * @param fillColor    The fill color of the shape.
     * @param borderWidth  The width of the shape's border.
     */
    public Shape(Point startPoint, Point endPoint, Color borderColor, Color fillColor, float borderWidth) {
        this.innerId = UUID.randomUUID().toString();
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.borderColorModel = borderColor;
        if (fillColor != null) {
            this.fillColorModel = fillColor;
        }
        if (borderColor != null) {
            this.borderWidth = borderWidth;
        }
    }

    /**
     * Rotate the shape by a specified rotation angle.
     *
     * @param rotationAngle The rotation angle in degrees.
     */
    public abstract void rotate(double rotationAngle);

    /**
     * Move the shape to a new position.
     *
     * @param deltaX The change in the x direction.
     * @param deltaY The change in the y direction.
     */
    public abstract void move(int deltaX, int deltaY);


    /**
     * Check if a point is contained within the shape.
     *
     * @param point The point to check.
     * @return True if the point is inside the shape, false otherwise.
     */
    public abstract boolean contains(Point point);

    /**
     * Draw the shape on the provided graphics context.
     *
     * @param g The graphics context to draw on.
     */
    public void drawShape(Graphics2D g) {
        g.setColor(borderColorModel);
        g.setStroke(new BasicStroke(borderWidth));
        g.setPaint(fillColorModel);
    }

    /**
     * Convert the shape to a JSON representation.
     *
     * @return The JSON representation of the shape.
     */
    public JsonObject toJson() {
        JsonObjectBuilder builder = Json.createObjectBuilder();
        return builder.build();
    }

    /**
     * Check if two shapes are equal.
     *
     * @param o The object to compare.
     * @return True if the shapes are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Shape)) return false;
        Shape shape = (Shape) o;
        return Float.compare(shape.getBorderWidth(), getBorderWidth()) == 0 && Objects.equals(getInnerId(), shape.getInnerId()) && getStartPoint().equals(shape.getStartPoint()) && getEndPoint().equals(shape.getEndPoint()) && getBorderColorModel().equals(shape.getBorderColorModel()) && getFillColorModel().equals(shape.getFillColorModel());
    }

    /**
     * Generate a hash code for the shape.
     *
     * @return The hash code of the shape.
     */
    @Override
    public int hashCode() {
        return Objects.hash(getInnerId(), getStartPoint(), getEndPoint(), getBorderColorModel(), getFillColorModel(), getBorderWidth());
    }

    public Point getStartPoint() {
        return startPoint;
    }

    public void setStartPoint(Point startPoint) {
        this.startPoint = startPoint;
    }

    public Point getEndPoint() {
        return endPoint;
    }

    public void setEndPoint(Point endPoint) {
        this.endPoint = endPoint;
    }

    public String getInnerId() {
        return innerId;
    }

    public void setInnerId(String innerId) {
        this.innerId = innerId;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public Color getBorderColorModel() {
        return borderColorModel;
    }

    public void setBorderColorModel(Color borderColorModel) {
        this.borderColorModel = borderColorModel;
    }

    public Color getFillColorModel() {
        return fillColorModel;
    }

    public void setFillColorModel(Color fillColorModel) {
        this.fillColorModel = fillColorModel;
    }

    public float getBorderWidth() {
        return borderWidth;
    }

    public void setBorderWidth(float borderWidth) {
        this.borderWidth = borderWidth;
    }

    public int getRotation() {
        return rotation;
    }

    public void setRotation(int rotation) {
        this.rotation = rotation;
    }


    public Shape clone() {
        Shape clonedShape = this.createShapeInstance();
        clonedShape.setUuid(this.getUuid());
        clonedShape.setInnerId(this.getInnerId());
        clonedShape.setBorderColorModel(new Color(this.borderColorModel.getRGB()));
        clonedShape.setFillColorModel(new Color(this.fillColorModel.getRGB()));
        clonedShape.setBorderWidth(this.borderWidth);
        clonedShape.setRotation(this.rotation);
        // Copy reference type properties
        if (this.startPoint != null) {
            clonedShape.setStartPoint(new Point(this.startPoint));
        }
        if (this.endPoint != null) {
            clonedShape.setEndPoint(new Point(this.endPoint));
        }
        return clonedShape;
    }

    protected abstract Shape createShapeInstance();




}